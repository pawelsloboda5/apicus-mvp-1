"use client";

import React from "react";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
} from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { HelpCircle, Trash2 } from "lucide-react";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { pricing } from "@/app/api/data/pricing";
import { NodePropertiesPanelProps, NodeData, NodeType } from "@/lib/types";
import { calculateNodeTimeSavings, calculateROIRatio, formatROIRatio } from "@/lib/roi-utils";
import { NODE_TIME_FACTORS } from "@/lib/utils/constants";

// Import specific node panels
import { TriggerNodePanel } from "./TriggerNodePanel";
import { ActionNodePanel } from "./ActionNodePanel";
import { DecisionNodePanel } from "./DecisionNodePanel";
import { EmailContextNodePanel } from "./EmailContextNodePanel";
import { DefaultNodePanel } from "./DefaultNodePanel";

export function NodePropertiesPanel({
  selectedNode,
  onClose,
  platform,
  nodes,
  setNodes,
  runsPerMonth,
  minutesPerRun,
  hourlyRate,
  taskMultiplier,
  edges,
}: NodePropertiesPanelProps) {
  const nodeData = selectedNode?.data as NodeData | undefined;
  
  const isEmailContextNode = nodeData?.isEmailContext || [
    "persona", "industry", "painpoint", "metric", 
    "urgency", "socialproof", "objection", "value"
  ].includes(selectedNode?.type || "");

  const handleDeleteNode = () => {
    if (!selectedNode) return;
    setNodes((prevNodes) => prevNodes.filter(node => node.id !== selectedNode.id));
    onClose();
  };

  // Select the appropriate panel component based on node type
  const renderNodePanel = () => {
    if (!selectedNode) return null;

    if (isEmailContextNode) {
      return (
        <EmailContextNodePanel
          node={selectedNode}
          nodes={nodes}
          edges={edges}
          setNodes={setNodes}
        />
      );
    }

    switch (selectedNode.type) {
      case "trigger":
        return (
          <TriggerNodePanel
            node={selectedNode}
            setNodes={setNodes}
          />
        );
      
      case "action":
        return (
          <ActionNodePanel
            node={selectedNode}
            setNodes={setNodes}
          />
        );
      
      case "decision":
        return (
          <DecisionNodePanel
            node={selectedNode}
            setNodes={setNodes}
          />
        );
      
      default:
        return (
          <DefaultNodePanel
            node={selectedNode}
            setNodes={setNodes}
          />
        );
    }
  };

  return (
    <Sheet
      open={!!selectedNode}
      onOpenChange={(open) => {
        if (!open) onClose();
      }}
    >
      <SheetContent side="right" className="w-[480px] sm:w-[540px] p-0 flex flex-col h-screen bg-white dark:bg-gray-950">
        <SheetHeader className="p-6 pb-4 border-b flex-shrink-0">
          <SheetTitle>
            {isEmailContextNode ? 'Email Context Node' : 'Node Properties'}
          </SheetTitle>
          <SheetDescription>
            {isEmailContextNode 
              ? 'Configure this email context to influence email generation.'
              : 'Configure the selected node\'s settings and view its ROI contribution.'}
          </SheetDescription>
        </SheetHeader>
        
        {selectedNode && (
          <div className="flex-1 overflow-y-auto">
            <div className="p-6 space-y-6">
              {/* Node Overview */}
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-base font-semibold">Overview</h3>
                  <Badge 
                    variant={isEmailContextNode ? "secondary" : "outline"}
                    className={cn(
                      "text-xs",
                      isEmailContextNode && "bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400"
                    )}
                  >
                    {selectedNode.type?.toUpperCase()}
                  </Badge>
                </div>
                <div className="space-y-1">
                  <p className="text-xs text-muted-foreground">ID: {selectedNode.id}</p>
                  <p className="text-sm text-muted-foreground">
                    {isEmailContextNode && 
                      "Email context nodes influence how emails are generated by providing additional context about your target audience, pain points, and value propositions."}
                    {!isEmailContextNode && selectedNode.type === "trigger" && 
                      "Triggers start automation workflows when certain events occur."}
                    {!isEmailContextNode && selectedNode.type === "action" && 
                      "Actions perform operations like creating, updating, or sending data."}
                    {!isEmailContextNode && selectedNode.type === "decision" && 
                      "Decisions branch the workflow based on conditions."}
                  </p>
                </div>
              </div>

              {/* Render the appropriate node panel */}
              {renderNodePanel()}

              {/* App Details */}
              {!isEmailContextNode && nodeData?.appName && (
                <div className="space-y-3">
                  <h3 className="text-base font-semibold">App Details</h3>
                  <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                    <div className="text-muted-foreground">App:</div>
                    <div className="font-medium break-all">{String(nodeData.appName)}</div>
                    
                    {nodeData.action && (
                      <>
                        <div className="text-muted-foreground">Action:</div>
                        <div className="font-medium break-all">{String(nodeData.action)}</div>
                      </>
                    )}
                    
                    {nodeData.typeOf && (
                      <>
                        <div className="text-muted-foreground">Type:</div>
                        <div className="font-medium capitalize break-all">{String(nodeData.typeOf)}</div>
                      </>
                    )}
                  </div>
                </div>
              )}

              {/* ROI Contribution */}
              {!isEmailContextNode && (
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <h3 className="text-base font-semibold">ROI Contribution</h3>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <HelpCircle className="h-4 w-4 text-muted-foreground" />
                      </TooltipTrigger>
                      <TooltipContent className="max-w-xs">
                        <p>This calculation estimates how much time and money this specific step saves within the overall workflow.</p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Estimated financial impact of this automation step.
                  </p>
                  
                  {(() => {
                    const adjustedMinutes = calculateNodeTimeSavings(
                      selectedNode.type as NodeType, 
                      minutesPerRun,
                      nodes,
                      NODE_TIME_FACTORS,
                      nodeData?.typeOf
                    );
                    
                    const hourValue = hourlyRate * taskMultiplier;
                    const stepValue = (adjustedMinutes / 60) * hourValue * runsPerMonth;
                    
                    const data = pricing[platform];
                    const tierName: Record<string, string> = {
                      zapier: "Professional",
                      make: "Core",
                      n8n: "Starter"
                    };
                    const currentTierName = tierName[platform] || Object.values(tierName)[0];
                    const tier = data.tiers.find((t: { name: string; monthlyUSD: number; quota: number }) => t.name === currentTierName) || data.tiers[0];
                    const costPerUnit = tier.quota ? (tier.monthlyUSD / tier.quota) : 0;
                    
                    let unitsPerRunNode = 1; 
                    if (platform === 'zapier') {
                      unitsPerRunNode = 1;
                    } else if (platform === 'make') {
                      unitsPerRunNode = selectedNode.type === 'action' ? 1.2 : (selectedNode.type === 'trigger' || selectedNode.type === 'decision' ? 1 : 0.5);
                    } else if (platform === 'n8n') {
                      unitsPerRunNode = 1 / Math.max(1, nodes.filter(n => n.type !== 'group').length);
                    }
                    const monthlyCostNode = unitsPerRunNode * runsPerMonth * costPerUnit;
                    const roiRatioNode = calculateROIRatio(stepValue, monthlyCostNode);

                    return (
                      <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                        <div className="text-muted-foreground flex items-center gap-1">
                          Time Saved / run:
                          <Tooltip>
                            <TooltipTrigger>
                              <HelpCircle className="h-3 w-3 text-muted-foreground/70" />
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>Estimated based on node type and operation complexity.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="font-medium tabular-nums">{adjustedMinutes.toFixed(1)} min</div>
                        
                        <div className="text-muted-foreground">Monthly runs:</div>
                        <div className="font-medium tabular-nums">{runsPerMonth.toLocaleString()}</div>
                        
                        <div className="text-muted-foreground">Monthly time saved:</div>
                        <div className="font-medium tabular-nums">
                          {((adjustedMinutes * runsPerMonth) / 60).toFixed(1)} hrs
                        </div>
                        
                        <div className="text-muted-foreground flex items-center gap-1">
                          Monthly value:
                          <Tooltip>
                            <TooltipTrigger>
                              <HelpCircle className="h-3 w-3 text-muted-foreground/70" />
                            </TooltipTrigger>
                            <TooltipContent className="max-w-[250px]">
                              <p>Time Value Calculation:</p>
                              <p>({adjustedMinutes.toFixed(1)} min / 60) &times; ${hourlyRate.toFixed(2)}/hr &times; {taskMultiplier.toFixed(1)}x multiplier &times; {runsPerMonth.toLocaleString()} runs</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="font-medium text-green-600 dark:text-green-400 tabular-nums">
                          ${stepValue.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0})}
                        </div>
                        
                        <div className="text-muted-foreground flex items-center gap-1">
                          Contribution:
                          <Tooltip>
                            <TooltipTrigger>
                              <HelpCircle className="h-3 w-3 text-muted-foreground/70" />
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>Percentage of total workflow time value provided by this step.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="font-medium tabular-nums">
                          {Math.round((stepValue / Math.max(1, (hourlyRate * taskMultiplier * (minutesPerRun / 60) * runsPerMonth))) * 100)}% of total
                        </div>
                        
                        <div className="text-muted-foreground flex items-center gap-1">
                          {platform} cost:
                          <Tooltip>
                            <TooltipTrigger>
                              <HelpCircle className="h-3 w-3 text-muted-foreground/70" />
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>Estimated platform cost attributed to this node for the month.</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="font-medium text-red-600 dark:text-red-400 tabular-nums">
                          ${monthlyCostNode.toFixed(2)}
                        </div>
                        
                        <div className="text-muted-foreground flex items-center gap-1">
                          Node ROI Ratio:
                          <Tooltip>
                            <TooltipTrigger>
                              <HelpCircle className="h-3 w-3 text-muted-foreground/70" />
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>Value generated by this node vs. its cost (Value / Cost).</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                        <div className="font-medium tabular-nums">
                          {formatROIRatio(roiRatioNode)}
                        </div>
                      </div>
                    );
                  })()}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Footer with Delete Button */}
        <SheetFooter className="p-6 pt-4 border-t flex-shrink-0">
          <Button
            variant="destructive"
            size="sm"
            onClick={handleDeleteNode}
            className="w-full flex items-center gap-2"
          >
            <Trash2 className="h-4 w-4" />
            Delete Node
          </Button>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  );
} 